<style>
    .creature {
        position: absolute;
        width: 64px; /* Frame width */
        height: 64px;
        background: url('/images/pixel-vpet/roaming-pet.png') no-repeat;
        background-size: 512px 64px; /* Adjust based on total sheet size */
        transition: transform 0.3s ease-out, left linear, top linear;
        left: 0;
        top: 0;
    }
    @keyframes idle {
        0% { background-position-x: 0px; }
        33.33% { background-position-x: -64px; }
        66.66% { background-position-x: -128px; }
        100% { background-position-x: 0px; }
    }
    @keyframes walk {
        0% { background-position-x: -192px; }
        25% { background-position-x: -256px; }
        50% { background-position-x: -320px; }
        75% { background-position-x: -384px; }
        100% { background-position-x: -448px; }
    }
    .idle {
        animation: idle 1s steps(1) infinite;
    }
    .walk {
        animation: walk 0.5s steps(1) infinite;
    }
    .flipped {
        transform: scaleX(-1);
    }
</style>

<div class="creature idle" id="creature"></div>

<script>
    const creature = document.getElementById('creature');
    const container = creature.parentElement;
    const speed = 75; // Pixels per second

    function getRandomTime(min, max) {
        return Math.random() * (max - min) + min;
    }

    function getRandomPosition() {
        const maxX = container.clientWidth - creature.clientWidth;
        const maxY = container.clientHeight - creature.clientHeight;
        return {
            x: Math.random() * maxX,
            y: Math.random() * maxY
        };
    }

    function moveTo(x, y) {
        creature.classList.remove('idle');
        creature.classList.add('walk');
        const startX = parseFloat(getComputedStyle(creature).left) || 0;
        const startY = parseFloat(getComputedStyle(creature).top) || 0;
        const deltaX = x - startX;
        const deltaY = y - startY;
        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        const duration = distance / speed * 1000; // Convert to ms

        // Flip sprite depending on movement direction
        if (deltaX < 0) {
            creature.style.transform = 'scaleX(-1)';
        } else {
            creature.style.transform = 'scaleX(1)';
        }

        creature.style.transition = `left ${duration}ms linear, top ${duration}ms linear`;
        requestAnimationFrame(() => {
            creature.style.left = `${x}px`;
            creature.style.top = `${y}px`;
        });

        setTimeout(() => {
            creature.classList.remove('walk');
            creature.classList.add('idle');
            roam();
        }, duration);
    }

    function roam() {
        setTimeout(() => {
            const target = getRandomPosition();
            moveTo(target.x, target.y);
        }, getRandomTime(1000, 2000));
    }

    // Ensure proper positioning on first animation
    requestAnimationFrame(() => {
        const initialPosition = getRandomPosition();
        creature.style.left = `${initialPosition.x}px`;
        creature.style.top = `${initialPosition.y}px`;
        roam();
    });
</script>
