<style>
  .creature {
    position: absolute;
    width: 64px; /* Frame width */
    height: 64px;
    background: url("/images/pixel-vpet/roaming-pet.png") no-repeat;
    background-size: 512px 64px; /* Adjust based on total sheet size */
    transition:
      transform 0.3s ease-out,
      left linear,
      top linear;
    left: 0;
    top: 0;
    cursor: grab;
    z-index: 100;
  }
  @keyframes idle {
    0% {
      background-position-x: 0px;
    }
    33.33% {
      background-position-x: -64px;
    }
    66.66% {
      background-position-x: -128px;
    }
    100% {
      background-position-x: 0px;
    }
  }
  @keyframes walk {
    0% {
      background-position-x: -192px;
    }
    25% {
      background-position-x: -256px;
    }
    50% {
      background-position-x: -320px;
    }
    75% {
      background-position-x: -384px;
    }
    100% {
      background-position-x: -448px;
    }
  }
  .idle {
    animation: idle 1s steps(1) infinite;
  }
  .walk {
    animation: walk 0.5s steps(1) infinite;
  }
  .flipped {
    transform: scaleX(-1);
  }
</style>

<div class="creature idle" id="creature"></div>

<script>
  const creature = document.getElementById("creature");
  const container = document.body;
  const speed = 75; // Pixels per second
  let isDragging = false;
  let roamTimeout;
  let animationTimeout;
  let offsetX = 0,
    offsetY = 0;

  function getRandomTime(min, max) {
    return Math.random() * (max - min) + min;
  }

  function getRandomPosition() {
    const maxX = container.clientWidth - creature.clientWidth;
    const maxY = container.clientHeight - creature.clientHeight;
    return {
      x: Math.random() * maxX,
      y: Math.random() * maxY,
    };
  }

  function moveTo(x, y) {
    creature.classList.remove("idle");
    creature.classList.add("walk");

    const startX = parseFloat(getComputedStyle(creature).left) || 0;
    const startY = parseFloat(getComputedStyle(creature).top) || 0;
    const deltaX = x - startX;
    const deltaY = y - startY;
    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    const duration = (distance / speed) * 1000; // Convert to ms

    if (deltaX < 0) {
      creature.style.transform = "scaleX(-1)";
    } else {
      creature.style.transform = "scaleX(1)";
    }

    creature.style.transition = `left ${duration}ms linear, top ${duration}ms linear`;
    requestAnimationFrame(() => {
      creature.style.left = `${x}px`;
      creature.style.top = `${y}px`;
    });

    animationTimeout = setTimeout(() => {
      creature.classList.remove("walk");
      creature.classList.add("idle");
      roam();
    }, duration);
  }

  function roam() {
    clearTimeout(roamTimeout);
    clearTimeout(animationTimeout);
    roamTimeout = setTimeout(
      () => {
        if (!isDragging) {
          const target = getRandomPosition();
          moveTo(target.x, target.y);
        }
      },
      getRandomTime(1000, 2000),
    );
  }

  function startDrag(event) {
    isDragging = true;
    let rect = creature.getBoundingClientRect();

    clearTimeout(roamTimeout); // Stop roaming while dragging
    clearTimeout(animationTimeout);
    creature.classList.remove("idle", "walk");
    creature.style.transition = "none"; // Cancel transition to prevent teleporting
    creature.style.cursor = "grabbing";

    let clientX = (event.clientX || event.touches[0].clientX) + window.scrollX;
    let clientY = (event.clientY || event.touches[0].clientY) + window.scrollY;

    offsetX = clientX - rect.left;
    offsetY = clientY - rect.top;

    teleportTo(event);
  }

  function onDrag(event) {
    if (!isDragging) return;
    event.preventDefault();
    teleportTo(event);
  }

  function teleportTo(event) {
    let clientX =
      (event.clientX || event.touches[0].clientX) + window.scrollX * 2;
    let clientY =
      (event.clientY || event.touches[0].clientY) + window.scrollY * 2;

    let x = clientX - offsetX;
    let y = clientY - offsetY;

    creature.style.left = `${x}px`;
    creature.style.top = `${y}px`;
  }

  function stopDrag() {
    if (isDragging) {
      isDragging = false;
      creature.style.cursor = "grab";
      creature.classList.add("idle"); // Reset to idle animation
      roam(); // Resume random movement
    }
  }

  creature.addEventListener("mousedown", startDrag);
  creature.addEventListener("touchstart", startDrag);
  document.addEventListener("mousemove", onDrag);
  document.addEventListener("touchmove", onDrag);
  document.addEventListener("mouseup", stopDrag);
  document.addEventListener("touchend", stopDrag);

  requestAnimationFrame(() => {
    const initialPosition = getRandomPosition();
    creature.style.left = `${initialPosition.x}px`;
    creature.style.top = `${initialPosition.y}px`;
    roam();
  });

  function logPosition() {
    setInterval(() => {
      let rect = creature.getBoundingClientRect();
    }, 500);
  }

  logPosition();
</script>
